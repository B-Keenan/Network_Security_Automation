- name: Gather partitions and provision info
  f5networks.f5_modules.bigip_device_info:
    gather_subset:
      - partitions
      - provision-info
    provider: "{{ provider }}"
  register: device_info

- name: Gather virtual servers
  f5networks.f5_modules.bigip_device_info:
    partition: "{{ item }}"
    gather_subset:
      - virtual-servers
    provider: "{{ provider }}"
  loop: "{{ device_info.partitions | json_query('[*].name') }}"
  register: vs_info

- name: Set AVR provisioned fact
  set_fact:
    avr_provisioned: "{{ 'true' if device_info.provision_info | selectattr('name', 'equalto', 'avr') | map(attribute='level') | first == 'nominal' else 'false' }}"

- name: List HTTP analytics profiles
  f5networks.f5_modules.bigip_command:
    commands: run util bash -c "tmsh -q -c 'cd /; list ltm profile analytics recursive'"
    provider: "{{ provider }}"
  register: http_analytics_profiles
  when: avr_provisioned | bool

- name: List TCP analytics profiles
  f5networks.f5_modules.bigip_command:
    commands: run util bash -c "tmsh -q -c 'cd /; list ltm profile tcp-analytics recursive'"
    provider: "{{ provider }}"
  register: tcp_analytics_profiles
  when: avr_provisioned | bool

- name: Extract HTTP analytics profile names
  set_fact:
    http_analytics_profile_names: "{{ (http_analytics_profiles.stdout_lines | flatten | select('match', '^ltm profile analytics') | map('regex_replace', '^ltm profile analytics\\s+([^\\s}]+).*', '\\1') | list) | default([]) }}"
  when: avr_provisioned | bool

- name: Extract TCP analytics profile names
  set_fact:
    tcp_analytics_profile_names: "{{ (tcp_analytics_profiles.stdout_lines | flatten | select('match', '^ltm profile tcp-analytics') | map('regex_replace', '^ltm profile tcp-analytics\\s+([^\\s}]+).*', '\\1') | list) | default([]) }}"
  when: avr_provisioned | bool

- name: Check if analytics profiles are used in virtual servers
  set_fact:
    analytics_profiles_used: "{{ 'true' if vs_info.results | flatten | select('json_query', '[?profiles[?full_path in `' + (('/' + (http_analytics_profile_names + tcp_analytics_profile_names) | join('`,`/')) | default('')) + '`]]') | list | length > 0 else 'false' }}"
  when: avr_provisioned | bool

- name: Determine if AVR is used
  set_fact:
    avr_unused: "{{ '✔' if avr_provisioned | bool and analytics_profiles_used | bool and (http_analytics_profile_names | length > 0 or tcp_analytics_profile_names | length > 0) else '✖' }}"

- name: Set unused modules notes
  set_fact:
    avr_unused_notes: "{{ 'AVR is provisioned but not used by any virtual servers' if avr_unused == '✔' else 'No unused modules found' }}"
    
- name: Append AVR unused check to results
  set_fact:
    hardening_check_results: "{{ hardening_check_results + [{
      'check_category': 'System Configuration',
      'check_item': 'Unused modules',
      'status': avr_unused,
      'notes': avr_unused_notes
      }] }}"