- name: List all SSL keys
  f5networks.f5_modules.bigip_command:
    commands:
      - run util bash -c "tmsh -q -c 'cd /; list sys crypto recursive key'"
    provider: "{{ provider }}"
  register: ssl_key_list

- name: Parse SSL key details
  set_fact:
    ssl_key_invalid: >-
      {%- set invalid_keys = [] -%}
      {%- set output = ssl_key_list.stdout[0] if ssl_key_list.stdout is defined and ssl_key_list.stdout | length > 0 else '' -%}
      {%- if output -%}
        {%- for key_block in output.split('sys crypto key ') -%}
          {%- if key_block -%}
            {%- set key_size = (key_block | regex_search('key-size (\\d+)', '\\1') | first | default('0') | int) -%}
            {%- set key_type = (key_block | regex_search('key-type (\\S+)', '\\1') | first | default('unknown')) -%}
            {%- if key_size < 2048 or key_type not in ['rsa-private', 'ecdsa-private'] -%}
              {%- set _ = invalid_keys.append(key_block | regex_search('^(\\S+)', '\\1') | first | default('unknown')) -%}
            {%- endif -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
      {{ '✖' if invalid_keys | length > 0 else '✔' }}

- name: Set SSL key size check notes
  set_fact:
    ssl_key_invalid_notes: >-
      {{
      'SSL keys are valid' if ssl_key_invalid == '✔'
      else 'SSL keys are invalid or insecure (less than 2048 bits or unsupported key type)'
      }}

- name: Append SSL key size check to results
  set_fact: 
    check_results: "{{ check_results + [{
      'check_category': 'SSL/TLS Security',
      'check_item': 'SSL keys are valid',
      'status': ssl_key_invalid,
      'notes': ssl_key_invalid_notes
      }] }}"