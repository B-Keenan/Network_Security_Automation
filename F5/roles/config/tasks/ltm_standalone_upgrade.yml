# Upgrade will be performed on a standalone BIG-IP TMOS device.
# Not for DNS or vCMP configurations.
#
# Custom variables: additional_arguments (AWX Survey text)
# BIGIP-17.1.2.2-0.0.12.iso
---
- name: Gather Date
  f5networks.f5_modules.bigip_command:
    commands: run util bash -c 'date "+%F"'
    provider: "{{ provider }}"
  register: date

- name: Save running configuration
  f5networks.f5_modules.bigip_config:
    save: yes
    provider: "{{ provider }}"

- name: Create UCS on the BIG-IP
  f5networks.f5_modules.bigip_ucs_fetch:
    async_timeout: 600
    src: "{{ inventory_hostname }}-{{ date.stdout }}.ucs"
    only_create_file: true
    provider: "{{ provider }}"

- name: Gather subsets in Common
  f5networks.f5_modules.bigip_device_info:
    gather_subset:
      - license
      - partitions
      - software-volumes
    provider: "{{ provider }}"
  register: device_info

- name: Gather subsets in all partitions
  f5networks.f5_modules.bigip_device_info:
    partition: "{{ item }}"
    gather_subset:
      - virtual-servers
      - ltm-pools
    provider: "{{ provider }}"
  loop: "{{ device_info.partitions | json_query('[*].name') }}"
  register: partition_info

- name: Pre-upgrade parse
  set_fact:
    start_stats:
      virtual_servers: "{{ partition_info.results | map(attribute='virtual_servers') | flatten
        | items2dict(key_name='full_path', value_name='availability_status') }}"
      ltm_pools: "{{ partition_info.results | map(attribute='ltm_pools') | flatten
        | items2dict(key_name='full_path', value_name='availability_status') }}"

- name: Set list of existing volumes
  set_fact:
    existing_volumes: >-
      {{ device_info.software_volumes | map(attribute='name') | list }}

- name: Set first available inactive volume
  set_fact:
    inactive_volume: >-
      {{ (device_info.software_volumes
            | selectattr('active', 'equalto', False)
            | map(attribute='name')
            | list
            | first | default(None, true)) }}

- name: Determine most common prefix for volume names
  set_fact:
    most_common_prefix: >-
      {{ (existing_volumes
            | map('regex_search', '^(HD|MD)')
            | list
            | unique)[0] if (existing_volumes | length > 0) }}
  when: inactive_volume is none or inactive_volume == ""

- name: Determine next available volume number
  set_fact:
    next_volume_number: >-
      {{ (existing_volumes
            | select('match', '^(HD|MD)1[.][1-9]$')
            | map('regex_replace', '^(HD|MD)1[.]', '')
            | map('int')
            | list
            | default([0]) | max) + 1 }}
  when: inactive_volume is none or inactive_volume == ""

- name: Set target volume
  set_fact:
    target_volume: >-
      {{ inactive_volume if inactive_volume is not none and inactive_volume != ""
        else most_common_prefix + '1.' + next_volume_number | string }}

- name: Reactivate license
  f5networks.f5_modules.bigip_device_license:
    accept_eula: true
    license_key: "{{ device_info.license.registration_key }}"
    state: "latest"
    provider: "{{ provider }}"

- name: Allow some time for services to start
  f5networks.f5_modules.bigip_wait:
    timeout: 300
    sleep: 15
    provider: "{{ provider }}"

- name: Install BIG-IP software
  f5networks.f5_modules.bigip_software_install:
    image: "{{ additional_arguments }}"
    state: activated
    volume: "{{ target_volume }}"
    provider: "{{ provider }}"
  async: 1200
  poll: 30

- name: Allow some time for services to start
  f5networks.f5_modules.bigip_wait:
    timeout: 600
    sleep: 30
    provider: "{{ provider }}"

- block:
  - name: Gather post-upgrade config facts
    f5networks.f5_modules.bigip_device_info:
      partition: "{{ item }}"
      gather_subset:
        - virtual-servers
        - ltm-pools
      provider: "{{ provider }}"
    loop: "{{ device_info.partitions | json_query('[*].name') }}"
    register: partition_info

  - name: Post-upgrade parse
    set_fact:
      end_stats:
        virtual_servers: "{{ partition_info.results | map(attribute='virtual_servers') | flatten
          | items2dict(key_name='full_path', value_name='availability_status') }}"
        ltm_pools: "{{ partition_info.results | map(attribute='ltm_pools') | flatten
          | items2dict(key_name='full_path', value_name='availability_status') }}"

  - name: Check Virtual Servers
    assert:
      that:
        - item.value == end_stats.virtual_servers[item.key]
      fail_msg: "Virtual server '{{ item.key }}' state changed from '{{ item.value }}' to '{{ end_stats.virtual_servers[item.key] }}'"
      success_msg: "{{ item.key }} state unchanged"
      quiet: yes
    loop: "{{ start_stats.virtual_servers | dict2items }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Check Pools
    assert:
      that:
        - item.value == end_stats.ltm_pools[item.key]
      fail_msg: "Pool '{{ item.key }}' state changed from '{{ item.value }}' to '{{ end_stats.ltm_pools[item.key] }}'"
      success_msg: "{{ item.key }} state unchanged"
      quiet: yes
    loop: "{{ start_stats.ltm_pools | dict2items }}"
    loop_control:
      label: "{{ item.key }}"