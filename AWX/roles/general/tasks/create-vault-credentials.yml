---
- name: Check if Vault-Lookup credential exists
  uri:
    url: "{{ awx_url }}/credentials/?name=Vault-Lookup"
    method: GET
    headers:
      Authorization: "Bearer {{ awx_token }}"
    return_content: yes
  register: vault_cred_check

- name: Set vault_cred_id if it exists
  set_fact:
    vault_cred_id: "{{ vault_cred_check.json.results[0].id }}"
  when: vault_cred_check.json.count > 0

- name: Create Vault Lookup Credential if it doesn't exist
  uri:
    url: "{{ awx_url }}/credentials/"
    method: POST
    headers:
      Authorization: "Bearer {{ awx_token }}"
      Content-Type: "application/json"
    body_format: json
    body: |
      {
        "name": "Vault-Lookup",
        "description": "Vault secret lookup for network creds",
        "organization": {{ organization_id }},
        "credential_type": 14,
        "inputs": {
          "url": "{{ vault_addr }}",
          "token": "{{ vault_token }}",
          "api_version": "v2"
        }
      }
    status_code: 201
  register: vault_cred_create
  when: vault_cred_check.json.count == 0

- name: Set vault_cred_id from creation
  set_fact:
    vault_cred_id: "{{ vault_cred_create.json.id }}"
  when: vault_cred_check.json.count == 0

- name: Debug vault_cred_id
  debug:
    msg: "Vault Credential ID: {{ vault_cred_id }}"

- name: Create Network Credentials for each device
  uri:
    url: "{{ awx_url }}/credentials/"
    method: POST
    headers:
      Authorization: "Bearer {{ awx_token }}"
      Content-Type: "application/json"
    body_format: json
    body: |
      {
        "name": "{{ item }}",
        "description": "Credentials for {{ item }}",
        "organization": {{ organization_id }},
        "credential_type": 3,
        "inputs": {},
        "vault_id": "{{ vault_cred_id }}",
        "vault_path": "{{ vendor }}/{{ item }}",
        "vault_key": "username",
        "vault_password_path": "{{ vendor }}/{{ item }}",
        "vault_password_key": "password"
      }
    status_code: 201, 400  # 400 if credential exists
  loop: "{{ device_names.split(',') }}"
  register: network_cred_result
  failed_when: "'error' in network_cred_result.msg and network_cred_result.status != 400"