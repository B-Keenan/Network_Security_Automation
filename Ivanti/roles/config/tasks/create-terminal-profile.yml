# Create a terminal service resource profile and assign to a User Role.
# Retrieve contents, e.g.
# Hostname User ID
# PC0001 ben
# PC0002 alice
#
# Iterate over the list, creating a resource profile and/or User Role for every 2 items, respectively.
# Custom variables: input_content (refer to above sample data), domain (static)
---
- name: Create pc_user_list from input content
  ansible.builtin.set_fact:
    pc_user_list: "{{ input_content.split('\n')[1:] | map('split', ' ') | list }}"
  when: input_content is defined

- name: Check for duplicate pc_names
  ansible.builtin.fail:
    msg: "Duplicate name found: {{ item[0] }}. Each name must be unique."
  when: (pc_user_list | map('first') | list | unique | length) != (pc_user_list | length)
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[0] }}"

- name: Check if User Role exists
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/configuration/users/user-roles/user-role/{{ item[1] }}%20RDP%20Users"
    method: GET
    headers:
      Authorization: 'Basic {{ authorization }}'
    force_basic_auth: yes
    validate_certs: false
    status_code: [200, 404]
  register: role_response
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[1] }} RDP Users"

- name: Create User Role if it doesn't exist
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/configuration/users/user-roles/user-role"
    method: POST
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Authorization: 'Basic {{ authorization }}'
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item[1] }} RDP Users"
    status_code: 201
    validate_certs: false
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[1] }} RDP Users"
  when: role_response.results | selectattr('item.1', 'equalto', item[1]) | map(attribute='status') | first == 404

- name: Configure Role Mapping for Secureauth_SAML_Remote
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/configuration/users/user-realms/realm/Secureauth_SAML_Remote/role-mapping-rules"
    method: POST
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Authorization: 'Basic {{ authorization }}'
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item[1] }} RDP Mapping"
      conditions:
        - type: "simple"
          attribute: "username"
          operator: "is"
          value: "{{ item[1] }}"
      roles:
        - "{{ item[1] }} RDP Users"
      stop: false
    status_code: 201
    validate_certs: false
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[1] }} RDP Mapping"

- name: Check if the resource profile exists
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/configuration/users/resource-profiles/terminal-services-profiles/terminal-services-profile/{{ item[0] }}"
    method: GET
    headers:
      Authorization: 'Basic {{ authorization }}'
    force_basic_auth: yes
    validate_certs: false
    status_code: [200, 404]
  register: profiles_response
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[0] }}"

- name: Create Terminal Service Profile and Assign User Role
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}:{{ device_https_port }}/api/v1/configuration/users/resource-profiles/terminal-services-profiles/terminal-services-profile"
    method: POST
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Authorization: 'Basic {{ authorization }}'
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item[0] }}"
      roles:
        - "{{ item[1] }} RDP Users"
      wts:
        host: "{{ item[0] }}.{{ domain }}"
        sessions:
          session:
            - alias-name: ""
              allow-clipboard: "false"
              application-path: ""
              apply: "all"
              auto-launch: "false"
              color-depth: "32bit"
              connect-comports: "false"
              connect-drives: "false"
              connect-printers: "true"
              connect-smartcards: "false"
              description: ""
              disable-nla: "false"
              experience-options:
                bitmap-caching: "false"
                desktop-background: "false"
                desktop-composition: "false"
                font-smoothing: "false"
                menu-window-animation: "false"
                show-content-dragging: "false"
                themes: "false"
              host: "{{ item[0] }}.{{ domain }}"
              launch-seamless: "false"
              microphone-option: "false"
              multi-mon: "true"
              name: "{{ item[0] }}"
              password-type: "variable"
              path-dir: ""
              port: "3389"
              roles: null
              screen-size: "fullscreen"
              smartcard-nla: "disabled"
              sound-options: "bring-to-local"
              username: "CORPORATE\\{{ item[1] }}"
              variable-password: ""
    status_code: 201
    validate_certs: false
  register: create_response
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[0] }} - {{ item[1] }}"
  when: profiles_response.results | selectattr('item.0', 'equalto', item[0]) | map(attribute='status') | first == 404

- name: Retrieve the profile details
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/configuration/users/resource-profiles/terminal-services-profiles/terminal-services-profile/{{ item[0] }}"
    method: GET
    headers:
      Authorization: 'Basic {{ authorization }}'
    force_basic_auth: yes
    validate_certs: false
    status_code: [200]
  loop: "{{ pc_user_list }}"
  loop_control:
    label: "{{ item[0] }} - {{ item[1] }}"
  when: profiles_response.results | selectattr('item.0', 'equalto', item[0]) | map(attribute='status') | first == 404
